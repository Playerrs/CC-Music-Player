---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by josue.
--- DateTime: 12/04/2023 20:46
---
local args = {...}

if not fs.exists("Client/Cache") then
    term.clear()
    term.setCursorPos(1,1)
    print("What's your name?")
    local t = fs.open("Client/Cache", "w")
    t.writeLine(read())
    t.writeLine(os.getComputerID())
    math.randomseed(os.clock()*10000000)
    t.writeLine(math.random(1050, 65200))
    t.close()
end

--- Imports

os.loadAPI("Dependencies/touchpoint")
os.loadAPI("Dependencies/Manager.lua")
local api = Manager
local modemAPI = require("../Dependencies/ModemAPI")
local json = require("../Dependencies/Json")

--- Classes

local Chat = require("../Classes/Chat")
local Message = require("../Classes/Message")
local Device = require("../Classes/Device")

--- Load

local W, H = term.getSize()
local dataDir = "Client/data/"

local cacheChats = Chat.loadJSON(dataDir)

local __f = fs.open("Client/Cache", "r")
local userName = __f.readLine()
local computerID = tonumber(__f.readLine())
local modemPort = tonumber(__f.readLine())
__f.close()

local thisDevice = Device:new(userName, computerID, modemPort)
local modem = modemAPI.startModem(modemPort)

--- Screen

local menu = touchpoint.new()
local listChats = touchpoint.new()
local options = touchpoint.new()

--- Functions

local function constructorChat(chatObj)
    local ch = Chat:new(chatObj.name, chatObj.id, {}, {})
    for _,v in ipairs(chatObj.members) do
        ch:addMember(Device:new(v.userName, v.computerID, v.modemPort))
    end

    for _,t in ipairs(chatObj.messages) do
        local user = Device:new(t.device.userName, t.device.computerID, t.device.modemPort)
        ch:addMessage(Message:new(t.content, user))
    end

    return ch
end

local function printChat(chatObj)
    term.clear()
    term.setCursorPos(1,1)
    print("Chat: ".. chatObj.id)
    for i = 1, #chatObj.messages do
        print(chatObj.messages[i].device.userName)
        print(chatObj.messages[i].content.. "\n")
    end
    sleep(5)
end

local function enterInAChat(num)
    term.clear()
    term.setCursorPos(1,1)
    modem.transmit(20358+5, thisDevice.modemPort, {"enter_chat", {id = num, device = thisDevice}})

    local channel, receivedMessage, rChannel = modemAPI.receive()

    if receivedMessage[1] == "error" then
        print(receivedMessage[2])
    else
        Chat.saveJSON(receivedMessage[2].name, receivedMessage[2].id, dataDir)
        printChat(constructorChat(receivedMessage[2]))
    end
end

local function sendMessage()
    api.reset()
    print("Digite uma mensagem que deseja enviar")
    local msg = read()
    print("Agora digite o id do chat para qual deseja enviar a mensagem!")
    local idChat = read()
    modem.transmit(20358, thisDevice.modemPort, {"send", { id = idChat, content = msg }, thisDevice})
end

local function createAChat()
    api.reset()
    modem.transmit(20358+5, thisDevice.modemPort, {"create_chat", {members = { thisDevice }}})
    local channel, receivedMessage, rChannel = modemAPI.receive()

    if receivedMessage[1] == "done" then
        enterInAChat(receivedMessage[2].id)
        --printChat(constructorChat(receivedMessage[2]))
    end
end


menu:add("Novo", function()
    menu:flash("Novo", 0.5)
    createAChat()
end, math.floor(W/4), 3, math.floor((W/2)-2), 5, colors.blue, colors.green)

menu:add("Entrar", function()
    menu:flash("Entrar", 0.5)
    api.reset()
    print("Digite o id do chat!")
    enterInAChat(read())
end, math.floor((W/2)+2), 3, math.floor((W/4)*3), 5, colors.blue, colors.green)

menu:add("Lista", function()
    menu:flash("Lista", 0.5)
    --- TODO
end, math.floor(W/4), 7, math.floor((W/2)-2), 9, colors.blue, colors.green)

while true do
    api.reset()
    menu:run(function()
    end)
    --print("Digite enter, send ou create")
    --local r = read()
    --if r:sub(1, 4) == "crea" then
    --    createAChat()
    --elseif r:sub(1, 4) == "ente" then
    --    enterInAChat()
    --elseif r:sub(1, 4) == "send" then
    --    sendMessage()
    --end

    sleep(2)

end