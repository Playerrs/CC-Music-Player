-- Created by Player_rs
-- License MIT
-- V: 0.6

local remoteAPI = {}
remoteAPI.__index = remoteAPI

function remoteAPI.new(name, channel)
    local self = {
        name = name,
        channel = channel,
        modem = peripheral.find("modem"),
        lastMessages = {},
        typed = "",
        previousSent = {},
    }

    self.modem.open(channel)



    setmetatable(self, remoteAPI)
    return self
end

local __keysBlackList = {
    "CapsLock",
    "tab",
    "leftCtrl",
    "rightCtrl",
    "leftAlt",
    "rightAlt",
    "leftShift",
    "rightShift",
    "unknownKey"
}

local function limitedTable(t, insertion)
    table.insert(t, insertion)
    if #t > 16 then
        repeat
            table.remove(t, 1)
        until #t <= 16
    end
    return t
end

local function sendMessage(self, str)
    self.modem.transmit(self.channel, self.channel, str)
    limitedTable(self.previousSent, str)
end

local function parseTyped(self, str, key)
    for i = 1, #__keysBlackList do
        if key == __keysBlackList[i] then
            return str
        end
    end

    if key == "enter" or key == "numPadEnter" then
        sendMessage(self, self.typed)
        return ""
    end

    if key == "space" then
        return str .. " "
    elseif key == "backspace" then
        return string.sub(str, 1, #str-1)
    elseif key == "zero" or key == "numPad0" then
        return str .. "0"
    elseif key == "one" or key == "numPad1" then
        return str .. "1"
    elseif key == "two" or key == "numPad2" then
        return str .. "2"
    elseif key == "three" or key == "numPad3" then
        return str .. "3"
    elseif key == "four" or key == "numPad4" then
        return str .. "4"
    elseif key == "five" or key == "numPad5" then
        return str .. "5"
    elseif key == "six" or key == "numPad6" then
        return str .. "6"
    elseif key == "seven" or key == "numPad7" then
        return str .. "7"
    elseif key == "eight" or key == "numPad8" then
        return str .. "8"
    elseif key == "nine" or key == "numPad9" then
        return str .. "9"
    elseif key == "equals" then
        return str .. "="
    elseif key == "minus" then
        return str .. "-"
    elseif key == "numPadAdd" then
        return str .. "+"
    elseif key == "slash" then
        return str .. ":"
    elseif key == "semicolon" then
        return str .. "_"



    else
        return str .. key
    end
end

function remoteAPI:run(self, func)

    local function waitMessage()
        local event, side, channel, replyChannel, message, distance = os.pullEvent("modem_message")
        if channel ~= self.channel then
            self.waitUpdate()
            return
        end
        limitedTable(self.lastMessages, message)
        return
    end

    local function waitKey()
        local _, key = os.pullEvent("key_up")
        local name = keys.getName(key) or "unknownKey"

        self.typed = parseTyped(self, self.typed, name)
        return
    end

    while true do
        parallel.waitForAny(waitMessage, waitKey)
        if func then func() end
    end
end


function remoteAPI:getLastMessages()
    return self.lastMessages
end

return remoteAPI